watch(advancedState, (newState, prevState) => {
  let localState = { ...newState };

  if (isEqual(localState, prevState)) {
    return;
  }

  const level = findCheckboxTreeLevel(localState.value, 'maiar');
  if (level?.children) {
    const checkedCount = countCheckedCheckboxTreeLevels(level.children);

    level.input.state = validateInputState(level.input.state, () => {
      if (checkedCount < minCount) {
        return t('view.inputCheckboxTree.errors.maiar');
      }
      return null;
    });
  }

  localState = validateInputState(localState, (value) => {
    const errors = exportCheckboxTreeLevelErrorsAsArray(value);
    if (!isEmpty(errors)) {
      return t('view.inputCheckboxTree.errors.global');
    }
    return null;
  });

  advancedState.value = localState;
});