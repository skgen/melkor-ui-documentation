const checked = true;
const unchecked = false;

type InputValue = CheckboxTreeInputValue<typeof checked, typeof unchecked>;

const advancedState = ref<InputState<InputValue>>(
  createInputState({
    value: [
      {
        input: {
          state: createInputState({ value: false }),
          options: {
            checkedLabel: 'Maiar',
            checked,
            unchecked,
            name: 'maiar',
          },
        },
        children: [
          {
            input: {
              state: createInputState({ value: false }),
              options: {
                checkedLabel: 'Istari',
                checked,
                unchecked,
                name: 'istari',
              },
            },
            children: [
              {
                input: {
                  state: createInputState({ value: true }),
                  options: {
                    checkedLabel: 'Gandalf',
                    checked,
                    unchecked,
                    validate: validateGandalf,
                    name: 'gandalf',
                  },
                },
              },
              {
                input: {
                  state: createInputState({ value: false }),
                  options: {
                    checkedLabel: 'Saruman',
                    checked,
                    unchecked,
                    name: 'saruman',
                  },
                },
              },
              {
                input: {
                  state: createInputState({ value: true }),
                  options: {
                    checkedLabel: 'Radagast',
                    checked,
                    unchecked,
                    name: 'radagast',
                  },
                },
              },
            ],
          },
          {
            input: {
              state: createInputState({ value: false }),
              options: {
                checkedLabel: 'Sauron',
                checked,
                unchecked,
                validate: validateSauron,
                name: 'sauron',
              },
            },
          },
          {
            input: {
              state: createInputState({ value: true }),
              options: {
                checkedLabel: 'Eönwë',
                checked,
                unchecked,
                name: 'eonwe',
              },
            },
          },
        ],
      },
    ],
  }),
);

watch(advancedState, (newState, prevState) => {
  let localState = { ...newState };

  if (isEqual(localState, prevState)) {
    return;
  }

  const level = findCheckboxTreeLevel(localState.value, 'maiar');
  if (level?.children) {
    const checkedCount = countCheckedCheckboxTreeLevels(level.children);

    level.input.state = validateInputState(level.input.state, () => {
      if (checkedCount < minCount) {
        return t('view.inputCheckboxTree.errors.maiar');
      }
      return null;
    });
  }

  localState = validateInputState(localState, (value) => {
    const errors = exportCheckboxTreeLevelErrorsAsArray(value);
    if (!isEmpty(errors)) {
      return t('view.inputCheckboxTree.errors.global');
    }
    return null;
  });

  advancedState.value = localState;
});